{"version":3,"sources":["queries/index.js","components/BookDetail.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","displayBookDetail","props","book","data","name","genre","author","className","books","map","item","id","graphql","options","variables","bookId","useState","selectedId","setSelectedId","loading","onClick","e","displayBooks","displayAuthors","disabled","authors","value","compose","setName","setGenre","authorId","setAuthorId","onSubmit","preventDefault","refetchQueries","query","type","onChange","target","required","client","ApolloClient","uri","App","ReactDOM","render","document","getElementById"],"mappings":"uQAEMA,EAAgBC,IAAH,gFASbC,EAAkBD,IAAH,kFASfE,EAAkBF,IAAH,6LASfG,EAAeH,IAAH,8O,OC1BZI,EAAoB,SAACC,GAAW,IAC7BC,EAAQD,EAAME,KAAdD,KACP,OAAIA,EAEA,gCACE,6BAAKA,EAAKE,OACV,wCACS,+BAAOF,EAAKG,WAErB,yCACU,+BAAOH,EAAKI,OAAOF,UAE7B,0DACA,oBAAIG,UAAU,cAAd,SACGL,EAAKI,OAAOE,MAAMC,KAAI,SAACC,GACtB,OAAO,6BAAmBA,EAAKN,MAAfM,EAAKC,YAMtB,sDAQIC,cAAQb,EAAc,CACnCc,QAAS,SAACZ,GACR,MAAO,CACLa,UAAW,CACTH,GAAIV,EAAMc,WAJHH,EAJI,SAACX,GAClB,OAAO,qBAAKU,GAAG,eAAR,SAAwBX,EAAkBC,QCSpCW,cAAQjB,EAARiB,EA/BE,SAACX,GAAW,IAAD,EACUe,mBAAS,MADnB,mBACnBC,EADmB,KACPC,EADO,KAuB1B,OACE,gCACE,oBAAIP,GAAG,YAAP,SAvBiB,WACnB,IAAMR,EAAOF,EAAME,KACnB,OAAIA,EAAKgB,QACA,mDAEAhB,EAAKK,MAAMC,KAAI,SAACP,GACrB,OACE,oBAEEkB,QAAS,SAACC,GACRH,EAAchB,EAAKS,KAHvB,SAME,wBAAQJ,UAAU,0CAAlB,SACGL,EAAKE,QANHF,EAAKS,OAeIW,KACpB,cAAC,EAAD,CAAaP,OAAQE,U,QC5BrBM,EAAiB,SAACtB,GACtB,IAAIE,EAAOF,EAAMJ,gBACjB,OAAIM,EAAKgB,QACA,wBAAQK,UAAQ,EAAhB,6BAEArB,EAAKsB,QAAQhB,KAAI,SAACH,GACvB,OACE,wBAAwBoB,MAAOpB,EAAOK,GAAtC,SACGL,EAAOF,MADGE,EAAOK,QA6CbgB,sBACbf,YAAQf,EAAiB,CAACO,KAAM,oBAChCQ,YAAQd,EAAiB,CAACM,KAAM,oBAFnBuB,EArCC,SAAC1B,GAAW,IAAD,EACDe,mBAAS,IADR,mBAClBZ,EADkB,KACZwB,EADY,OAECZ,mBAAS,IAFV,mBAElBX,EAFkB,KAEXwB,EAFW,OAGOb,mBAAS,IAHhB,mBAGlBc,EAHkB,KAGRC,EAHQ,KAezB,OACE,uBAAMpB,GAAG,WAAWqB,SAZH,SAACX,GAClBA,EAAEY,iBACFhC,EAAMH,gBAAgB,CACpBgB,UAAW,CACTV,KAAMA,EACNC,MAAOA,EACPyB,SAAUA,GAEZI,eAAgB,CAAC,CAACC,MAAOxC,OAI3B,UACE,sBAAKY,UAAU,QAAf,UACE,+CACA,uBAAO6B,KAAK,OAAOC,SAAU,SAAChB,GAAD,OAAOO,EAAQP,EAAEiB,OAAOZ,QAAQa,UAAQ,OAEvE,sBAAKhC,UAAU,QAAf,UACE,2CACA,uBAAO6B,KAAK,OAAOC,SAAU,SAAChB,GAAD,OAAOQ,EAASR,EAAEiB,OAAOZ,QAAQa,UAAQ,OAExE,sBAAKhC,UAAU,QAAf,UACE,4CACA,yBAAQ8B,SAAU,SAAChB,GAAD,OAAOU,EAAYV,EAAEiB,OAAOZ,QAAQa,UAAQ,EAA9D,UACE,mDACChB,EAAetB,SAGpB,wBAAQM,UAAU,2CAAlB,qBC7CAiC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,kCAeQC,MAZf,WACE,OACE,cAAC,IAAD,CAAgBH,OAAQA,EAAxB,SACE,sBAAK7B,GAAG,OAAR,UACE,4DACA,cAAC,EAAD,IACA,cAAC,EAAD,UCZRiC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.6d2f963f.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\r\n\r\nconst getBooksQuery = gql`\r\n  {\r\n    books {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAuthorsQuery = gql`\r\n  {\r\n    authors {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\r\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBookQuery = gql`\r\n  query($id: ID) {\r\n    book(id: $id) {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        id\r\n        name\r\n        age\r\n        books {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport {getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery};\r\n","import {graphql} from 'react-apollo';\r\nimport {getBookQuery} from '../queries';\r\n\r\nconst displayBookDetail = (props) => {\r\n  const {book} = props.data;\r\n  if (book) {\r\n    return (\r\n      <div>\r\n        <h2>{book.name}</h2>\r\n        <p>\r\n          Genre: <span>{book.genre}</span>\r\n        </p>\r\n        <p>\r\n          Author: <span>{book.author.name}</span>\r\n        </p>\r\n        <p>All books by this author:</p>\r\n        <ul className='other-books'>\r\n          {book.author.books.map((item) => {\r\n            return <li key={item.id}>{item.name}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h3>No book selected...</h3>;\r\n  }\r\n};\r\n\r\nconst BookDetail = (props) => {\r\n  return <div id='book-details'>{displayBookDetail(props)}</div>;\r\n};\r\n\r\nexport default graphql(getBookQuery, {\r\n  options: (props) => {\r\n    return {\r\n      variables: {\r\n        id: props.bookId,\r\n      },\r\n    };\r\n  },\r\n})(BookDetail);\r\n","import {useState} from 'react';\r\nimport {graphql} from 'react-apollo';\r\nimport {getBooksQuery} from '../queries';\r\n\r\n//components\r\nimport BookDetails from './BookDetail';\r\n\r\nconst BookList = (props) => {\r\n  const [selectedId, setSelectedId] = useState(null);\r\n  const displayBooks = () => {\r\n    const data = props.data;\r\n    if (data.loading) {\r\n      return <div>Loading books...</div>;\r\n    } else {\r\n      return data.books.map((book) => {\r\n        return (\r\n          <li\r\n            key={book.id}\r\n            onClick={(e) => {\r\n              setSelectedId(book.id);\r\n            }}\r\n          >\r\n            <button className='bttn-material-flat bttn-sm bttn-success'>\r\n              {book.name}\r\n            </button>\r\n          </li>\r\n        );\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <ul id='book-list'>{displayBooks()}</ul>\r\n      <BookDetails bookId={selectedId} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import {useState} from 'react';\r\nimport {graphql} from 'react-apollo';\r\nimport {flowRight as compose} from 'lodash';\r\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from '../queries/index';\r\n\r\nconst displayAuthors = (props) => {\r\n  var data = props.getAuthorsQuery;\r\n  if (data.loading) {\r\n    return <option disabled>Loading authors</option>;\r\n  } else {\r\n    return data.authors.map((author) => {\r\n      return (\r\n        <option key={author.id} value={author.id}>\r\n          {author.name}\r\n        </option>\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nconst AddBook = (props) => {\r\n  const [name, setName] = useState('');\r\n  const [genre, setGenre] = useState('');\r\n  const [authorId, setAuthorId] = useState('');\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    props.addBookMutation({\r\n      variables: {\r\n        name: name,\r\n        genre: genre,\r\n        authorId: authorId,\r\n      },\r\n      refetchQueries: [{query: getBooksQuery}],\r\n    });\r\n  };\r\n  return (\r\n    <form id='add-book' onSubmit={submitForm}>\r\n      <div className='field'>\r\n        <label>Book name:</label>\r\n        <input type='text' onChange={(e) => setName(e.target.value)} required />\r\n      </div>\r\n      <div className='field'>\r\n        <label>Genre:</label>\r\n        <input type='text' onChange={(e) => setGenre(e.target.value)} required />\r\n      </div>\r\n      <div className='field'>\r\n        <label>Author:</label>\r\n        <select onChange={(e) => setAuthorId(e.target.value)} required>\r\n          <option>Select author</option>\r\n          {displayAuthors(props)}\r\n        </select>\r\n      </div>\r\n      <button className='bttn-material-circle bttn-md bttn-danger'>+</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery, {name: 'getAuthorsQuery'}),\r\n  graphql(addBookMutation, {name: 'addBookMutation'})\r\n)(AddBook);\r\n","import ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\n// components\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id='main'>\n        <h1>Kirin Tran's Book PlayList</h1>\n        <BookList />\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}